//========== Copyright (c) Valve Corporation, All rights reserved. ==========//

// STATIC: "DEFERRED_SHADOWS"	"0..1"	[XBOX]
// STATIC: "DEFERRED_SHADOWS"	"0..0"	[PC]
// STATIC: "BLOBBY_SHADOWS"		"0..1"
// STATIC: "DEBUG_SHADOWS"		"0..3"
// STATIC: "SHADOW_MODE"		"0..4"
// STATIC: "VARIABLE_SOFTNESS"	"0..1"
// STATIC: "VARIABLE_SAMPLES"	"0..1"

// SKIP: DEBUG_SHADOWS == 1 && SHADOW_MODE != 0
// SKIP: DEBUG_SHADOWS == 2 && SHADOW_MODE != 0
// SKIP: DEBUG_SHADOWS == 3 && SHADOW_MODE != 4 && VARIABLE_SOFTNESS != 1
// SKIP: BLOBBY_SHADOWS == 1 && SHADOW_MODE != 0
// SKIP: DEFERRED_SHADOWS == 1 && SHADOW_MODE != 0
// SKIP: VARIABLE_SOFTNESS != 0 && SHADOW_MODE != 4
// SKIP: VARIABLE_SAMPLES != 0 && SHADOW_MODE != 4
// SKIP: ( VARIABLE_SOFTNESS == 0 ) && ( VARIABLE_SAMPLES == 1 )
#include "common_fog_ps_fxc.h"

#define HDRTYPE HDR_TYPE_NONE
#include "common_ps_fxc.h"

const HALF4 g_ShadowColor						: register( c1 );
const HALF3 g_EyePos							: register( c2 );
const HALF4 g_FogParams							: register( c3 );
const float4 g_DeferredParams					: register( c4 );

#define g_MaxFalloffAmount	g_DeferredParams.x
#define g_vInvScreenSize	g_DeferredParams.yz

const float4x4 g_mInvViewProj					: register( c5 );

const float4 g_ShadowParams						: register( c10 );
#define g_ShadowBias		g_ShadowParams.x
#define g_ShadowTextureSize	g_ShadowParams.y
#define g_ShadowSamplesMin	g_ShadowParams.z
#define g_ShadowSamplesMax	g_ShadowParams.w

#ifdef SHADER_MODEL_PS_3_0

const float4 g_ShadowParams2					: register( c11 );
#define g_ShadowFilterScale			g_ShadowParams2.x
#define g_ShadowFilterMin			g_ShadowParams2.y
#define g_ShadowFilterMax			g_ShadowParams2.z
#define g_ShadowSampleFilterScale	g_ShadowParams2.w

const float4 g_ShadowParams3					: register( c12 );
#define g_SoftShadowDistance		g_ShadowParams3.x

#endif

sampler ShadowSampler	: register( s0 );
sampler sDepth			: register( s1 );

#if DEFERRED_SHADOWS == 0

//////////////////////////////////
// NORMAL SHADOW SHADER
//////////////////////////////////

// CENTROID: TEXCOORD1
// CENTROID: TEXCOORD2
// CENTROID: TEXCOORD3
struct PS_INPUT
{
	HALF4 worldPos_projPosZ		    : TEXCOORD0;
	#if defined( _X360 )
		float4 vFalloffParams			: TEXCOORD1_centroid;
		float3 texCoord0_shadowAlpha	: TEXCOORD2_centroid;
	#else
		float4 vFalloffParams			: TEXCOORD1;
		float3 texCoord0_shadowAlpha	: TEXCOORD2;
	#endif
#if !defined( _X360 )
	float4 texCoord1_2				: TEXCOORD3;
	float4 texCoord3_4				: TEXCOORD4;
#endif
};

float tex2DShadow( sampler ShadowMap, float2 uv )
{
#ifdef SHADER_MODEL_PS_3_0
	float2 texRes = float2(g_ShadowTextureSize, g_ShadowTextureSize);
	
	float2 samplingFragment = uv * texRes - float2(0.5, 0.5);
    float2 f = frac(samplingFragment);
	float2 samplePos = ( floor(samplingFragment) + float2(0.5, 0.5) );// / texRes;

	float4 samples;
	samples.x = tex2D( ShadowMap, (samplePos) / texRes ).r > g_ShadowBias ? 1.0 : 0.0;
	samples.y = tex2D( ShadowMap, (samplePos + float2(1, 0)) / texRes ).r > g_ShadowBias ? 1.0 : 0.0;
	samples.z = tex2D( ShadowMap, (samplePos + float2(0, 1)) / texRes ).r > g_ShadowBias ? 1.0 : 0.0;
	samples.w = tex2D( ShadowMap, (samplePos + float2(1, 1)) / texRes ).r > g_ShadowBias ? 1.0 : 0.0;

	float row1 = lerp( samples.x, samples.y, f.x );
	float row2 = lerp( samples.z, samples.w, f.x );

	return lerp( row1, row2, f.y );
#else
	return tex2D( ShadowMap, uv ).r > g_ShadowBias ? 1.0 : 0.0;
#endif
}

// PCF: 4x4 kernel = 16 total samples
// kernel radius 1.5 px
float DoShadowPCF( sampler ShadowMap, float2 vTexCoords )
{
	float sum = 0;
	float x, y;

	[unroll]
	for (y = -1.5; y <= 1.5; y += 1.0)
	{
		[unroll]
		for (x = -1.5; x <= 1.5; x += 1.0)
		{
			sum += tex2DShadow( ShadowMap, vTexCoords + (float2(x, y) / g_ShadowTextureSize) );
		}
	}
	
	return sum / 16.0;
}

static float2 cPoissonDisc[16] = 
{
	float2( -0.94201624, -0.39906216 ),
	float2( 0.94558609, -0.76890725 ),
	float2( -0.094184101, -0.92938870 ),
	float2( 0.34495938, 0.29387760 ),
	float2( -0.91588581, 0.45771432 ),
	float2( -0.81544232, -0.87912464 ),
	float2( -0.38277543, 0.27676845 ),
	float2( 0.97484398, 0.75648379 ),
	float2( 0.44323325, -0.97511554 ),
	float2( 0.53742981, -0.47373420 ),
	float2( -0.26496911, -0.41893023 ),
	float2( 0.79197514, 0.19090188 ),
	float2( -0.24188840, 0.99706507 ),
	float2( -0.81409955, 0.91437590 ),
	float2( 0.19984126, 0.78641367 ),
	float2( 0.14383161, -0.14100790 )
};

// Poisson disc shadow filtering, 16 samples
float DoShadowPoisson( sampler ShadowMap, float2 vTexCoords )
{
	float sum = 0.0;

	for (int i = 0; i < 16; i++)
	{
		sum += tex2DShadow( ShadowMap, vTexCoords + (cPoissonDisc[i] / 700.0) );
	}

	return sum / 16.0;
}

// TODO: better random and better seeds
float random(float4 seed4)
{
	float dot_product = dot(seed4, float4(12.9898,78.233,45.164,94.673));
    return frac(sin(dot_product) * 43758.5453);
}

// Stratified poisson disc shadow filtering like flashlights. 16 samples
float DoShadowStratifiedPoisson( sampler ShadowMap, float2 vTexCoords, float3 worldSpacePos )
{
	float coverage = 0.0;

	for (int i = 0; i < 16; i++)
	{
		//float3 seedSource = vTexCoords.xyy;
		float3 seedSource = floor(worldSpacePos.zyx * 25.0);
		int index = int( 16.0 * random(float4(seedSource, i)) ) % 16;
		coverage += 0.0625 * tex2DShadow( ShadowMap, vTexCoords + (cPoissonDisc[index] / 700.0) );
	}

	return coverage;
}

#if SHADOW_MODE == 4
// must be included after tex2DShadow
#include "common_pcss_fxc.h"
#endif

float4 main( PS_INPUT i ) : COLOR
{
	// Debug Modes 1 and 2
#if DEBUG_SHADOWS == 1 || DEBUG_SHADOWS == 2
	//float singleSample = tex2D( ShadowSampler, i.texCoord0_shadowAlpha.xy ).r;
	
	float fVertAlpha1 = saturate( i.vFalloffParams.w * i.vFalloffParams.y + i.vFalloffParams.x );
	#if DEBUG_SHADOWS == 2
	fVertAlpha1 = saturate( i.vFalloffParams.z + fVertAlpha1 * g_MaxFalloffAmount );
	#endif
	
	return FinalOutput( float4( fVertAlpha1, fVertAlpha1, fVertAlpha1, 1.0f ), 0.0f, PIXEL_FOG_TYPE_NONE, TONEMAP_SCALE_NONE );
#else
	

	HALF shadowCoverage;
	
	#if SHADOW_MODE == 0 || !defined(SHADER_MODEL_PS_3_0)
	{
		// Legacy Shadow Filtering

		#if BLOBBY_SHADOWS == 1
		{
			shadowCoverage = tex2D( ShadowSampler, i.texCoord0_shadowAlpha.xy ).r;
		}
		#elif !defined( _X360 )
		{
			HALF samples0;
			HALF4  samples1_4;
			samples0 = tex2D( ShadowSampler, i.texCoord0_shadowAlpha.xy ).r;
			samples1_4.x = tex2D( ShadowSampler, i.texCoord1_2.xy ).r;
			samples1_4.y = tex2D( ShadowSampler, i.texCoord1_2.wz ).r;
			samples1_4.z = tex2D( ShadowSampler, i.texCoord3_4.xy ).r;
			samples1_4.w = tex2D( ShadowSampler, i.texCoord3_4.wz ).r;

			// Interpolate between a bunch of jittered shadow samples.
			shadowCoverage = samples0 * 0.2 + dot( samples1_4, HALF4( 0.2, 0.2, 0.2, 0.2 ) );
		}
		#else
		{
			float samples0 = tex2D( ShadowSampler, i.texCoord0_shadowAlpha.xy ).r;
			float2 texCoord = i.texCoord0_shadowAlpha.xy;
			float4 samples1_4;
			asm {
				tfetch2D samples1_4.w___, texCoord.xy, ShadowSampler, OffsetX = -1.0, OffsetY = -1.0
				tfetch2D samples1_4._w__, texCoord.xy, ShadowSampler, OffsetX =  1.0, OffsetY = -1.0
				tfetch2D samples1_4.__w_, texCoord.xy, ShadowSampler, OffsetX = -1.0, OffsetY =  1.0
				tfetch2D samples1_4.___w, texCoord.xy, ShadowSampler, OffsetX =  1.0, OffsetY =  1.0
			};

			// Interpolate between a bunch of jittered shadow samples.
			shadowCoverage = samples0 * 0.2 + dot( samples1_4, HALF4( 0.2,0.2,0.2,0.2 ) );
		}
		#endif
	}
	#elif SHADOW_MODE == 1
	{
		// PCF
		shadowCoverage = DoShadowPCF( ShadowSampler, i.texCoord0_shadowAlpha.xy );
	}	
	#elif SHADOW_MODE == 2
	{
		// Poisson Disc
		shadowCoverage = DoShadowPoisson( ShadowSampler, i.texCoord0_shadowAlpha.xy );
	}
	#elif SHADOW_MODE == 3
	{
		// Stratified Poisson Disc
		shadowCoverage = DoShadowStratifiedPoisson( ShadowSampler, i.texCoord0_shadowAlpha.xy, i.worldPos_projPosZ.xyz );
	}
	#elif SHADOW_MODE == 4
	{
	
		float filterSize;
		int sampleCount;

		#if VARIABLE_SOFTNESS == 1
		{
			float fSoftness = i.vFalloffParams.w * i.vFalloffParams.y + i.vFalloffParams.x; // (Z - Offset) / Dist

			// re-calculate falloff with g_SoftShadowDistance
			// [ Given vFalloffParams.y = 1/Dist; fSoftness = (Z-Offset)/Dist ]
			fSoftness *= (1.0f / i.vFalloffParams.y) / g_SoftShadowDistance;

			fSoftness = saturate( fSoftness ); 

			// Debug Mode 3
			#if DEBUG_SHADOWS == 3
			return FinalOutput( float4( fSoftness, fSoftness, fSoftness, 1.0f ), 0.0f, PIXEL_FOG_TYPE_NONE, TONEMAP_SCALE_NONE );
			#endif

			// TODO: probably need a better curve
			filterSize = clamp( g_ShadowFilterScale * fSoftness, g_ShadowFilterMin, g_ShadowFilterMax );
		}
		#else
		{
			filterSize = g_ShadowFilterMin;
		}
		#endif

		#if VARIABLE_SAMPLES == 1
		{
			// TODO: probably want a better, likely simpler, algorithm for this
			float sampleCountScaled = max( saturate( (filterSize - g_ShadowFilterMin) / (g_ShadowSampleFilterScale * g_ShadowFilterMax) ) * g_ShadowSamplesMax, g_ShadowSamplesMin );
			sampleCount = round(sampleCountScaled);
		}
		#else
		{
			sampleCount = round(g_ShadowSamplesMax);
		}
		#endif

		shadowCoverage = DoShadowFibonacci( ShadowSampler, i.texCoord0_shadowAlpha.xy, filterSize, sampleCount );
	}
	#endif

	// compute "vertex" alpha
	// NOTE: 0 means black, non-zero adds towards white...
	float fVertAlpha = saturate( i.vFalloffParams.w * i.vFalloffParams.y + i.vFalloffParams.x );	// could pull the mad into the VS

	fVertAlpha = saturate( i.vFalloffParams.z + fVertAlpha * g_MaxFalloffAmount );
	//fVertAlpha = i.texCoord0_shadowAlpha.z;
	
	// To accomplish shadow fading, subtract vertex alpha from texture alpha
	shadowCoverage = saturate( shadowCoverage - fVertAlpha );

	
	// Blend between white and the constant color...
	// return lerp( 1.0-shadowCoverage, 1.0, g_ShadowColor );  
	
	// this is equivalent, and saves an instruction
	HALF4 result = shadowCoverage*g_ShadowColor - shadowCoverage;
	result = 1.0 + result;
	
	float alpha = 1.0;
	
	//#if SHADOW_MODE != 0
		// Get alpha from shadow coverage
		//alpha -= shadowCoverage;
	//#endif
	

	float fogFactor = CalcPixelFogFactor( PIXELFOGTYPE, g_FogParams, g_EyePos.xyz, i.worldPos_projPosZ.xyz, i.worldPos_projPosZ.w );
	
	// Apply fog here to compensate for our srcColor*dstColor alpha blend into already fogged pixels
	result.rgb = 1.0f - ( ( 1.0f - result.rgb ) * pow( ( 1.0f - fogFactor ), 4.0f ) );
	
	// Call FinalOutput without fog!
	return FinalOutput( float4( result.rgb, alpha ), fogFactor, PIXEL_FOG_TYPE_NONE, TONEMAP_SCALE_NONE );

#endif // DEBUG_SHADOWS == 0
}

#else // DEFERRED_SHADOWS == 1

//////////////////////////////////
// X360 DEFERRED SHADOW SHADER
//////////////////////////////////

// CENTROID: TEXCOORD1
// CENTROID: TEXCOORD2
// CENTROID: TEXCOORD3
struct PS_INPUT
{
	float4 vTexCoordBiasScale	: TEXCOORD0;

	#if defined( _X360 )
		float4 vProjToTex0			: TEXCOORD1_centroid;
		float4 vProjToTex1			: TEXCOORD2_centroid;
		float4 vProjToTex2			: TEXCOORD3_centroid;
	#else
		float4 vProjToTex0			: TEXCOORD1;
		float4 vProjToTex1			: TEXCOORD2;
		float4 vProjToTex2			: TEXCOORD3;
	#endif
	float4 vProjToTex3			: TEXCOORD4;
	float3 vFalloffParams		: TEXCOORD5;
	float2 vPos					: VPOS;
};

float4 main( PS_INPUT i ) : COLOR
{
	float4 vPosCS;
	vPosCS.xy = ( i.vPos+float2(0.5, 0.5) ) * g_vInvScreenSize;
	vPosCS.z = 1.0 - tex2D( sDepth, vPosCS.xy );
	vPosCS.w = 1.0;
	vPosCS.xy = 2.0 * vPosCS.xy - 1.0;
	vPosCS.y = -vPosCS.y;

	//return float4((1-vPosCS.z).xxx, 1);

	float4 vPosTS;// = mul( vPosCS, g_mScreenToTexture );
	
	// Clip space to shadow texture space transform
	vPosTS.x = dot( vPosCS, i.vProjToTex0 );
	vPosTS.y = dot( vPosCS, i.vProjToTex1 );
	vPosTS.z = dot( vPosCS, i.vProjToTex2 );
	vPosTS.w = dot( vPosCS, i.vProjToTex3 );
	vPosTS /= vPosTS.w;

	// check if pixel is within shadow frustum, and early-out if it's not
	float2 vClamped = saturate( vPosTS.xy );
	vClamped -= vPosTS.xy;
	clip( 0.0001 - dot( vClamped, vClamped ) );

	// extract normal in texture space
	float3 vNormalTS = cross( ddx(vPosTS.xyz), ddy(vPosTS.xyz) );

	#if BLOBBY_SHADOWS == 0
		float2 vTexCoord = i.vTexCoordBiasScale.xy + i.vTexCoordBiasScale.zw * vPosTS.xy;
	#else
		float2 vTexCoord = vPosTS.xy;
	#endif

	float shadowCoverage = 0.0f;
	#if !defined( _X360 ) || ( BLOBBY_SHADOWS == 1 )
	{
		shadowCoverage = tex2D( ShadowSampler, vTexCoord ).a;
	}
	#else
	{
		float samples0 = tex2D( ShadowSampler, vTexCoord ).a;
		float4 samples1_4;
		asm {
			tfetch2D samples1_4.w___, vTexCoord.xy, ShadowSampler, OffsetX = -1.0, OffsetY = -1.0
			tfetch2D samples1_4._w__, vTexCoord.xy, ShadowSampler, OffsetX =  1.0, OffsetY = -1.0
			tfetch2D samples1_4.__w_, vTexCoord.xy, ShadowSampler, OffsetX = -1.0, OffsetY =  1.0
			tfetch2D samples1_4.___w, vTexCoord.xy, ShadowSampler, OffsetX =  1.0, OffsetY =  1.0
		};

		// Interpolate between a bunch of jittered shadow samples.
		shadowCoverage = samples0 * 0.2 + dot( samples1_4, HALF4( 0.2,0.2,0.2,0.2 ) );
	}
	#endif

	// compute "vertex" alpha
	// NOTE: 0 means black, non-zero adds towards white...
	float fVertAlpha = saturate( vPosTS.z * i.vFalloffParams.y + i.vFalloffParams.x );	// could pull the mad into the VS
	fVertAlpha = saturate( i.vFalloffParams.z + fVertAlpha * g_MaxFalloffAmount );

	// To accomplish shadow fading, subtract vertex alpha from texture alpha
	shadowCoverage = saturate( shadowCoverage - fVertAlpha );

	// mask out shadows on geometry facing away from the shadow direction
	shadowCoverage *= saturate(sign(vNormalTS.z));

	// TODO: Add fog

	// Blend between white and the constant color...
	// return lerp( 1.0-shadowCoverage, 1.0, g_ShadowColor );  
	
	// this is equivalent, and saves an instruction
	HALF4 result = shadowCoverage*g_ShadowColor - shadowCoverage;
	result = 1.0 + result;

	float alpha = 1.0f;

	// TODO: Add support for fog
	float fogFactor = 0;	
	/*
	// Apply fog here to compensate for our srcColor*dstColor alpha blend into already fogged pixels
	result.rgb = 1.0f - ( ( 1.0f - result.rgb ) * pow( ( 1.0f - fogFactor ), 4.0f ) );
	*/

	//return float4( g_shadowColor.rgb, shadowCoverage );

	// Call FinalOutput without fog!
	return FinalOutput( float4( result.rgb, alpha ), fogFactor, PIXEL_FOG_TYPE_NONE, TONEMAP_SCALE_NONE );
}

#endif
